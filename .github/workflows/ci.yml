name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

permissions:
  contents: read # For checkout - test
  issues: write # To be able to comment on released issues
  pull-requests: write # To be able to comment on released pull requests
  id-token: write # To enable use of OIDC for npm provenance

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 'latest'
      - name: Build project
        run: deno task build
      - name: List build directory contents
        run: ls -la ./dist

  # Lint Job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 'latest'
      - name: Run lint
        run: deno lint
  # Check Job
  types:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 'latest'
      - name: install
        run: deno install
      - name: check src
        run: deno check src

  # Healthcheck Job
  health:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 'latest'
      - name: Start server
        run: deno task start &
      - name: Health check
        run: |
          retries=10
          count=0
          until curl -f http://localhost:3000; do
            count=$((count + 1))
            if [ $count -lt $retries ]; then
              echo "Health check failed, retrying in 5 seconds... ($count/$retries)"
              sleep 5
            else
              echo "Health check failed after $retries attempts, exiting."
              exit 1
            fi
          done

  # Audit Job
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: 'latest'
      - name: Run security audit
        run: npm audit --audit-level=critical

  # Release Job (Only for main and dev branches)
  release:
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev')
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # To publish a GitHub release
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of dependencies
        run: npm audit signatures
      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_DEPLOY_TOKEN }}
        run: npx semantic-release --branch ${GITHUB_REF#refs/heads/} --ci
      - name: Extract new version
        id: get_version
        run: echo "version=$(npx -c 'echo $npm_package_version')" >> $GITHUB_OUTPUT

  # Update Game Version (Only for main branch after release)
  update-game-version:
    needs: release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags
          persist-credentials: false
      - name: Set up credentials for pushing changes
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_DEPLOY_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.ACTIONS_DEPLOY_TOKEN }}@github.com/${{ github.repository }}
      - name: Fetch all tags
        run: git fetch --tags
      - name: Get latest tag
        id: get_latest_tag
        run: echo "latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
      - name: Get last commit message
        id: get_last_commit_message
        run: |
          echo "last_commit_message<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Check if commit is from GitHub Actions
        id: check_author
        run: |
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          if [ "$COMMIT_AUTHOR" = "github-actions[bot]" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      - name: Update gameVersion.json
        if: steps.check_author.outputs.skip == 'false'
        run: |
          mkdir -p public
          echo "{\"version\": \"${{ steps.get_latest_tag.outputs.latest_tag }}\"}" > public/gameVersion.json

      - name: Commit and push changes
        if: steps.check_author.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_DEPLOY_TOKEN }}
        run: |
          git add public/gameVersion.json
          git commit -m "${{ steps.get_latest_tag.outputs.latest_tag }} - ${{ steps.get_last_commit_message.outputs.last_commit_message }}" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Debugging List files in public after update
        if: steps.check_author.outputs.skip == 'false'
        run: ls -al public